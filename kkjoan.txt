Limita los métodos HTTP aceptados para la ruta:
limit_except GET POST {
    deny all;
}

Realiza una redirección HTTP:
return 301 /new-url;

Define un directorio o archivo desde donde se buscará el archivo:
alias /tmp/www;

Activa o desactiva la lista de directorios:
autoindex on;  # Activar la lista de directorios
autoindex off;  # Desactivar la lista de directorios

Establece un archivo predeterminado para responder si la solicitud es para un directorio:
index index.html;

Ejecuta CGI basado en ciertas extensiones de archivos (por ejemplo, .php):
fastcgi_pass unix:/var/run/php/php7.4-fpm.sock;
fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
include fastcgi_params;

Haz que funcione con los métodos POST y GET:
limit_except POST GET {
    deny all;
}

Permite que la ruta acepte archivos cargados y configura dónde deben guardarse:
client_max_body_size 10M;
proxy_pass http://backend/upload;

DICCIONARIO DE STATUS
/*1xx (Informacional):

    100 Continue
    101 Switching Protocols

2xx (Éxito):

    200 OK
    201 Created
    202 Accepted
    203 Non-Authoritative Information
    204 No Content
    205 Reset Content
    206 Partial Content
3xx (Redirección):

    300 Multiple Choices
    301 Moved Permanently
    302 Found
    303 See Other
    304 Not Modified
    307 Temporary Redirect
4xx (Error del cliente):

    400 Bad Request
    401 Unauthorized
    402 Payment Required
    403 Forbidden
    404 Not Found
    405 Method Not Allowed
    406 Not Acceptable
    407 Proxy Authentication Required
    408 Request Timeout
    409 Conflict
    410 Gone
    411 Length Required
    412 Precondition Failed
    413 Payload Too Large
    414 URI Too Long
    415 Unsupported Media Type
    416 Range Not Satisfiable
    417 Expectation Failed
    426 Upgrade Required
    451 Unavailable For Legal Reasons
5xx (Error del servidor):

    500 Internal Server Error
    501 Not Implemented
    502 Bad Gateway
    503 Service Unavailable
    504 Gateway Timeout
    505 HTTP Version Not Supported
    */

CGI SHIT:

Example uriCgiRequest:
    -http://example.com/cgi-bin/myscript.cgi/param1/value1/param2/value2
    -http://example.com/cgi-bin/category/script.cgi/product1
    -http://example.com/cgi-bin/main_script.cgi/sub_script1/sub_script2/data/info
    -http://example.com/cgi-bin/myscript.cgi/category/products/product1?param1=value1&param2=value2

metaVariables:
 - SCRIPT_NAME: Representa el componente inicial de la ruta del script. Es la parte de la URI que está asociada con el script CGI en cuestión. Por ejemplo, si la URI es "/cgi-bin/myscript.cgi", entonces SCRIPT_NAME podría ser "/cgi-bin/myscript.cgi".

 - PATH_INFO: Representa la parte adicional de la ruta que sigue a SCRIPT_NAME. Es la información de ruta adicional después del nombre del script en la URI. Utiliza el ejemplo anterior, si la URI es "/cgi-bin/myscript.cgi/some/path", entonces PATH_INFO podría ser "/some/path".

 - QUERY_STRING: Representa los parámetros de consulta en la URI. Es la parte de la URI que sigue al símbolo '?' y contiene los parámetros y sus valores. Por ejemplo, si la URI es "/cgi-bin/myscript.cgi?param1=value1&param2=value2", entonces QUERY_STRING podría ser "param1=value1&param2=value2".

URI CGI STRUCTURE
 script-URI = <scheme> "://" <server-name> ":" <server-port> <script-path> <extra-path> "?" <query-string>


meta-variable-value = "" | 1*<TEXT, CHAR or tokens of value>

Variables de entorno van al execv (meta variables añadidas al **)
Infile al pipe  del ejecutable pasas body(gestion poll)
path relativo + script selection
path relativo + path_info

  meta-variable-name = "AUTH_TYPE" | "CONTENT_LENGTH" |
                            "CONTENT_TYPE" | "GATEWAY_INTERFACE" |
                            "PATH_INFO" | "PATH_TRANSLATED" |
                            "QUERY_STRING" | "REMOTE_ADDR" |
                            "REMOTE_HOST" | "REMOTE_IDENT" |
                            "REMOTE_USER" | "REQUEST_METHOD" |
                            "SCRIPT_NAME" | "SERVER_NAME" |
                            "SERVER_PORT" | "SERVER_PROTOCOL" |
                            "SERVER_SOFTWARE" | scheme |
                            protocol-var-name | extension-var-name
       protocol-var-name  = ( protocol | scheme ) "_" var-name
       scheme             = alpha *( alpha | digit | "+" | "-" | "." )
       var-name           = token
       extension-var-name = token